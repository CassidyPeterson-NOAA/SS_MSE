###### Mark's MARSS example #######
# foreach(m=seq(N.ts-1), R=levels.R,
#         .combine='rbind',
#         .packages=c('MARSS'),
#         .export=c('dat.z')) %dopar% {
#           dfa.model = list(A="zero", R=R, m=m)
#           kemz = MARSS(dat.z, model=dfa.model, control=cntl.list, 
#                        form="dfa", z.score=TRUE, silent=TRUE)
#           model.data = rbind(model.data,
#                              data.frame(R=R,
#                                         m=m,
#                                         logLik=kemz$logLik,
#                                         K=kemz$num.params,
#                                         AICc=kemz$AICc,
#                                         stringsAsFactors=FALSE))
#           assign(paste("kemz", m, R, sep="."), kemz)
#         } # end foreach
# 
# 
# 
# 
# cntl.list = list(minit=200, maxit=5000, allow.degen=FALSE)
# # set up forms of R matrices
# levels.R = c("diagonal and equal",
#              "diagonal and unequal",
#              "equalvarcov",
#              "unconstrained")
# N.ts=5
# foreach(m=seq(N.ts-1), R=levels.R,
#         .combine='rbind',
#         .packages=c('MARSS'),
#         .export=c('dat.z')) %dopar% {
#           dfa.model = list(A="zero", R=R, m=m)
#           kemz = MARSS(dat.z, model=dfa.model, control=cntl.list, 
#                        form="dfa", z.score=TRUE, silent=TRUE)
#           model.data = rbind(model.data,
#                              data.frame(R=R,
#                                         m=m,
#                                         logLik=kemz$logLik,
#                                         K=kemz$num.params,
#                                         AICc=kemz$AICc,
#                                         stringsAsFactors=FALSE))
#           assign(paste("kemz", m, R, sep="."), kemz)
#         } # end foreach


# #### Proof of concept ####
# library(foreach)
# library(doSNOW)
# library(parallel)
# 
# c1 = makeCluster(2) # make clusters
# registerDoSNOW(c1)              # use the above cluster
# 
# for(i in names(list.hcr)){ print(list.hcr[[i]]$Fconst) }
# 
# foreach(h=names(list.hcr)) %dopar% {
#   print(list.hcr[[h]]$Fconst)
# }
# 
# stopCluster(c1)              #close clusters
# 
# # NOTE: must put functions in the 
